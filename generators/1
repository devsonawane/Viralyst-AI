# generators/idea_generator.py
from serpapi import GoogleSearch
import os

def perform_search(api_key, query, num_results=2):
    """A helper function to perform a single Google search."""
    try:
        params = {
            "q": query,
            "api_key": api_key,
            "num": num_results
        }
        search = GoogleSearch(params)
        search_results = search.get_dict()

        links = []
        if "organic_results" in search_results:
            for result in search_results["organic_results"]:
                links.append({
                    "title": result.get("title"),
                    "link": result.get("link")
                })
        return links
    except Exception as e:
        print(f"--- ERROR during Google Search for '{query}': {e} ---")
        return [{"title": f"Search failed for {query}", "link": "#"}]


def generate_with_references(api_key, niche, tone, audience):
    """
    Generates ideas and finds categorized reference links for them.
    """
    print(f"--- Generating ideas for niche: {niche} ---")

    # 1. Generate ideas (same as before)
    ideas = [
        f"A {tone} guide to {niche} for beginners",
        f"Why {audience} struggle with {niche} (and how to fix it)",
        f"The top 3 myths about {niche} debunked"
    ]

    results = []

    # 2. For each idea, perform multiple targeted searches
    for idea in ideas:
        print(f"--- Searching for all references for idea: '{idea}' ---")

        # Use the helper function to get different types of links
        article_links = perform_search(api_key, idea)
        youtube_links = perform_search(api_key, f"site:youtube.com {idea} shorts")
        instagram_links = perform_search(api_key, f"site:instagram.com reel {idea}")

        # Store the categorized links
        categorized_links = {
            "articles": article_links,
            "youtube": youtube_links,
            "instagram": instagram_links
        }

        results.append({"idea": idea, "links": categorized_links})

    return results
